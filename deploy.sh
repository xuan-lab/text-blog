#!/bin/bash\n\n# Exit immediately if a command exits with a non-zero status.\nset -e\n\n# --- Configuration Variables (User may need to adjust these if defaults are not suitable) ---\nPROJECT_NAME=\"text_blog_app\" # Used for filenames, service names etc.\n# Assumes script is run from the project root, so PROJECT_DIR will be the current directory\nPROJECT_DIR=$(pwd)\nPYTHON_ALIAS=\"python3\"\nPIP_ALIAS=\"pip3\"\nVENV_DIR=\"venv\" # Name of the virtual environment directory\n\n# Gunicorn settings\nGUNICORN_WORKERS=3 # Adjust based on your server's CPU cores (e.g., 2 * cores + 1)\nGUNICORN_HOST=\"127.0.0.1\" # Gunicorn will bind to localhost\nGUNICORN_PORT=\"8000\"      # Gunicorn will listen on this port\n\n# --- Main Deployment Steps ---\n\necho \"üöÄ Starting deployment of your Text Blog App...\"\necho \"----------------------------------------------------\"\n\n# 1. Get User Input\necho \"Please provide the following information:\"\nread -p \"Enter your domain name (e.g., yourblog.com, or server IP if no domain): \" DOMAIN_NAME\nread -s -p \"Enter a strong SECRET_KEY for Flask sessions: \" FLASK_SECRET_KEY\necho\nread -s -p \"Enter the ADMIN_PASSWORD_HASH for blog admin access: \" ADMIN_PASSWORD_HASH_VALUE\necho\necho \"----------------------------------------------------\"\n\n# Validate input (basic check)\nif [ -z \"$DOMAIN_NAME\" ] || [ -z \"$FLASK_SECRET_KEY\" ] || [ -z \"$ADMIN_PASSWORD_HASH_VALUE\" ]; then\n    echo \"‚ùå Error: Domain name, SECRET_KEY, and ADMIN_PASSWORD_HASH cannot be empty.\"\n    exit 1\nfi\n\n# 2. System Update and Install Dependencies\necho \"üîÑ Updating system packages and installing dependencies (git, python3, python3-venv, nginx, supervisor)...\"\nsudo apt-get update\nsudo apt-get install -y git $PYTHON_ALIAS $PYTHON_ALIAS-venv nginx supervisor\necho \"----------------------------------------------------\"\n\n# 3. Setup Project Environment\necho \"üêç Setting up Python virtual environment...\"\n$PYTHON_ALIAS -m venv $VENV_DIR\necho \"   Activating virtual environment...\"\nsource $VENV_DIR/bin/activate\n\necho \"   Installing Python dependencies from requirements.txt...\"\n$PIP_ALIAS install -r requirements.txt\necho \"   Installing Gunicorn...\"\n$PIP_ALIAS install gunicorn\n\necho \"   Deactivating virtual environment (Supervisor will manage it)...\"\ndeactivate\necho \"----------------------------------------------------\"\n\n# 4. Configure Supervisor for Gunicorn\necho \"‚öôÔ∏è  Configuring Supervisor to manage Gunicorn...\"\nSUPERVISOR_CONF_FILE=\"/etc/supervisor/conf.d/${PROJECT_NAME}.conf\"\n# Determine the user to run Gunicorn as. If script is run with sudo, $(whoami) is root.\n# It's better to run Gunicorn as a non-root user.\n# For simplicity, this script uses the user who invoked it (or root if sudo was used directly).\n# Consider creating a dedicated user for the app in a more advanced setup.\nAPP_USER=$(whoami)\nif [ \"$APP_USER\" == \"root\" ] && [ -n \"$SUDO_USER\" ]; then\n    APP_USER=$SUDO_USER # Prefer the original user if sudo was used\nfi\necho \"   Gunicorn will run as user: $APP_USER\"\n\nsudo bash -c \"cat > $SUPERVISOR_CONF_FILE\" << EOL\n[program:${PROJECT_NAME}]\ncommand=${PROJECT_DIR}/${VENV_DIR}/bin/gunicorn --workers ${GUNICORN_WORKERS} --bind ${GUNICORN_HOST}:${GUNICORN_PORT} app:app\ndirectory=${PROJECT_DIR}\nautostart=true\nautorestart=true\nstderr_logfile=/var/log/${PROJECT_NAME}_err.log\nstdout_logfile=/var/log/${PROJECT_NAME}_out.log\nuser=${APP_USER}\nenvironment=FLASK_APP=\"app.py\",SECRET_KEY='${FLASK_SECRET_KEY}',ADMIN_PASSWORD_HASH='${ADMIN_PASSWORD_HASH_VALUE}'\nEOL\necho \"   Supervisor configuration created at: $SUPERVISOR_CONF_FILE\"\necho \"----------------------------------------------------\"\n\n# 5. Configure Nginx as Reverse Proxy\necho \"üåê Configuring Nginx as a reverse proxy...\"\nNGINX_SITE_CONF=\"/etc/nginx/sites-available/${PROJECT_NAME}\"\nsudo bash -c \"cat > $NGINX_SITE_CONF\" << EOL\nserver {\n    listen 80;\n    server_name ${DOMAIN_NAME};\n\n    access_log /var/log/nginx/${PROJECT_NAME}_access.log;\n    error_log /var/log/nginx/${PROJECT_NAME}_error.log;\n\n    location /static {\n        alias ${PROJECT_DIR}/static;\n        expires 30d; # Cache static files\n    }\n\n    location / {\n        proxy_pass http://${GUNICORN_HOST}:${GUNICORN_PORT};\n        proxy_set_header Host \\\$host;\n        proxy_set_header X-Real-IP \\\$remote_addr;\n        proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\\$scheme;\n    }\n}\nEOL\necho \"   Nginx site configuration created at: $NGINX_SITE_CONF\"\n\n# Enable Nginx site\nif [ -L \"/etc/nginx/sites-enabled/${PROJECT_NAME}\" ]; then\n    echo \"   Removing existing Nginx site symlink...\"\n    sudo rm /etc/nginx/sites-enabled/${PROJECT_NAME}\nfi\necho \"   Enabling Nginx site by creating symlink...\"\nsudo ln -s $NGINX_SITE_CONF /etc/nginx/sites-enabled/\n\n# Test Nginx configuration\necho \"   Testing Nginx configuration...\"\nsudo nginx -t\nif [ $? -ne 0 ]; then\n    echo \"‚ùå Error: Nginx configuration test failed. Please check $NGINX_SITE_CONF and Nginx error logs.\"\n    exit 1\nfi\n\n# Remove default Nginx site if it exists to avoid conflicts (optional, but good practice)\nif [ -L \"/etc/nginx/sites-enabled/default\" ]; then\n    echo \"   Removing default Nginx site symlink...\"\n    sudo rm /etc/nginx/sites-enabled/default\nfi\necho \"----------------------------------------------------\"\n\n# 6. Restart Services\necho \"üîÑ Reloading Supervisor and Nginx configurations...\"\nsudo supervisorctl reread\nsudo supervisorctl update\necho \"   Starting/Restarting Gunicorn process via Supervisor (${PROJECT_NAME})...\"\nsudo supervisorctl restart ${PROJECT_NAME}\necho \"   Restarting Nginx...\"\nsudo systemctl restart nginx\necho \"----------------------------------------------------\"\n\n# 7. Final Instructions\necho \"‚úÖ Deployment complete!\"\necho \"Your blog should be accessible at: http://${DOMAIN_NAME}\"\necho \"If you used an IP address for the domain, use http://<your-server-ip>\"\necho \"\"\necho \"üìù Important Notes:\"\necho \"   - Nginx site configuration: ${NGINX_SITE_CONF}\"\necho \"   - Supervisor process configuration: ${SUPERVISOR_CONF_FILE}\"\necho \"   - Gunicorn application logs: /var/log/${PROJECT_NAME}_out.log (stdout) and /var/log/${PROJECT_NAME}_err.log (stderr)\"\necho \"   - Nginx logs: /var/log/nginx/${PROJECT_NAME}_access.log and /var/log/nginx/${PROJECT_NAME}_error.log\"\necho \"   - Ensure your domain's DNS records point to this server's IP address if you used a domain name.\"\necho \"   - For HTTPS (recommended for production), configure Certbot (Let's Encrypt) after this setup:\"\necho \"     Example for Certbot with Nginx: sudo apt install certbot python3-certbot-nginx; sudo certbot --nginx -d ${DOMAIN_NAME}\"\necho \"----------------------------------------------------\"\n\nexit 0\n
